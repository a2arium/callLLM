---
description: Testing standards and requirements that should be followed when writing or modifying tests
globs: 
alwaysApply: false
---
# Testing Standards

## ESM Testing Strategies (2024)

### ESM Export Immutability
- ESM module exports are immutable by design; you cannot reassign or spy on them after the module is loaded.
- Attempting to reassign or spy on an ESM export (e.g., with jest.spyOn or direct assignment) will throw a TypeError.

### ESM-Safe Mocking
- Use `jest.unstable_mockModule` to mock ESM modules before importing them. This is the official Jest approach for ESM-safe mocking.
- For partial mocks, forward all real exports using `...real` and override only the needed functions.
- If your Jest environment supports it, use `jest.importActual` (or `import.meta.jest.importActual`) to get the real module for partial mocks. If not, prefer integration-style testing.
- If neither `jest.importActual` nor `jest.requireActual` work (due to ESM restrictions), use dependency or error simulation at the integration level.

### Integration-Style Error Simulation
- When you cannot partially mock an ESM export, simulate errors by mocking the underlying dependency (e.g., mock `fs.promises.readFile` to reject, causing the higher-level function to throw).
- This approach is robust, portable, and works across all ESM environments.
- See `fileData.propagate-validation.test.ts` for an example of this pattern.

### Module-Level Isolation
- Use `jest.isolateModulesAsync` or separate test files to ensure that per-test mocks do not leak into unrelated tests.
- Always register mocks before importing the module under test.

### Dependency Injection for Testability
- For long-term maintainability, consider refactoring helpers to be injectable or wrapped in objects, so you can mock them without touching ESM exports.
- Exporting helpers as properties of an object allows property reassignment, since only the top-level binding is frozen.

### Known Limitations and Workarounds
- `jest.requireActual` does not work for ESM modules; use `jest.importActual` if available.
- If neither is available, use integration-style error simulation.
- Avoid direct assignment or spying on ESM exports.
- For CJS modules, traditional mocking and spying still work.

### Best Practices for ESM Tests
- Always mock before importing the module under test.
- Prefer integration-style error simulation for error propagation tests.
- Use module-level isolation to prevent mock leakage.
- Document ESM-specific test strategies in test headers.
- Reference real-world examples in the codebase.

### Path Aliases in ESM Mocks
- Use `@` path aliases consistently in `jest.unstable_mockModule` calls:
  ```typescript
  jest.unstable_mockModule('@/core/models/TokenCalculator.ts', () => ({
    __esModule: true,
    TokenCalculator: mockTokenCalculator
  }));
  ```
- When using path aliases, be aware of typing challenges with `mockImplementation`:
  ```typescript
  // TypeScript may complain about parameter types
  mockCalculateTokens.mockImplementation((text: string) => text.length);
  // Error: Argument of type '(text: string) => number' is not assignable to parameter of type 'UnknownFunction'
  
  // Workaround: Use any for the parameters when necessary
  mockCalculateTokens.mockImplementation((...args: any[]) => {
    const text = args[0];
    return typeof text === 'string' ? text.length : 0;
  });
  ```
- Always ensure path aliases in tests match your tsconfig.json path mapping
- Use consistent import patterns between mocks and actual imports
- Document path alias usage in test file headers when it affects mock behavior

## Test Structure
- Tests are organized in three levels:
  1. Unit tests (`/src/tests/unit/`)
  2. Integration tests (`/src/tests/integration/`)
  3. End-to-end tests (`/src/tests/e2e/`)

IMPORTANT: `tests` folder is in `src` directory, not in the root directory

## Directory Organization
- Mirror the source code directory structure in test directories
- Keep mocks in `__mocks__` directory at each test level
- Group related tests using describe blocks
- Use clear, descriptive test names that explain the scenario

## Coverage Requirements
- Minimum 90% test coverage for all code
- Test both success and error paths
- Test all streaming scenarios thoroughly
- Test JSON mode with different schema complexities
- Verify token calculation accuracy
- Test cost tracking accuracy

## Testing Principles
- No external API calls in unit and integration tests
- Use mocks for external services (OpenAI, etc.)
- Test type safety explicitly
- Test error handling comprehensively
- When fixing bugs, add regression tests

## Test File Naming and Organization
- Test files mirror source files with `.test.ts` suffix
- Follow pattern: `describe('Component', () => describe('method', () => it('should behavior', () => {})))`
- Use descriptive test names that explain the scenario
- Each test file should have a header comment explaining its purpose

## Mocking Conventions
- Create separate mock files for each external service
- Mock responses should cover all possible scenarios:
  - Success cases
  - Error cases
  - Edge cases
  - Partial responses
  - Malformed data
- For streaming, mock:
  - Various chunk sizes
  - Different streaming patterns
  - Complete and incomplete responses
  - Error conditions during streaming

## Specific Testing Requirements

### Streaming Tests
- Test content accumulation accuracy
- Verify JSON parsing at completion points
- Test schema validation during streaming
- Test error handling for malformed JSON
- Test token calculation during streaming
- Verify streaming state management

### Schema Validation Tests
- Test all supported schema types
- Test nested schema validation
- Test array schema validation
- Test schema error handling
- Test schema format conversions
- Verify validation error messages

### Text Processing Tests
- Test content type classification
- Test space handling
- Test splitting strategies:
  - Word-based splitting
  - Character-based splitting
  - Token-based splitting
- Test content reconstruction
- Test edge cases:
  - Empty content
  - Very large content
  - Special characters
  - Unicode characters

### Error Handling Tests
- Test all error types
- Verify error propagation
- Test retry mechanisms
- Test error recovery
- Verify error messages
- Test error state handling

### Performance Tests
- Test streaming performance
- Test token calculation speed
- Test large payload handling
- Test concurrent operations
- Test memory usage patterns

## Test Documentation
- Document test purpose and scope
- Document test dependencies
- Document test data sources
- Document expected behaviors
- Document edge cases covered
- Document known limitations

## Best Practices
- Keep tests focused and atomic
- Use appropriate test doubles
- Clean up test resources
- Avoid test interdependence
- Write maintainable test code
- Follow DRY principles in test code

# References
- See @tests/jest.setup.ts for test configuration
- See @tests/unit/core/retry/RetryManager.test.ts for example test patterns
- See @tests/__mocks__/@dqbd/tiktoken.ts for mock examples
- See @src/tests/unit/core/file-data/fileData.propagate-validation.test.ts for ESM error propagation example

---
description: Logging standards and requirements that should be followed when implementing logging in the codebase
globs: ["**/*.ts"]
alwaysApply: true
---
# Logging Guidelines

## Core Principles

1. Use the centralized logger utility
2. Never use direct console.log calls
3. Use appropriate log levels
4. Include contextual information
5. Keep logs actionable and meaningful

## Logger Usage

### Import and Setup

```typescript
import { logger } from '../../utils/logger';

// Create component-specific logger
const log = logger.createLogger({ 
    prefix: 'ComponentName'  // e.g., 'OpenAIResponseAdapter.chatCall', 'ToolController' 
});
```

### Log Levels

Use the appropriate level for each log:

1. **debug**: Detailed information for debugging
   ```typescript
   log.debug('Processing tool call:', { name, arguments });
   ```

2. **info**: General operational information
   ```typescript
   log.info('Successfully completed operation');
   ```

3. **warn**: Warning conditions
   ```typescript
   log.warn('Approaching rate limit:', rateLimitInfo);
   ```

4. **error**: Error conditions
   ```typescript
   log.error('Failed to execute tool:', error);
   ```

### Best Practices

1. **Component Prefixing**
   - Set prefix when creating logger
   - Use meaningful component names
   - Include method names for better traceability
   ```typescript
   const log = logger.createLogger({ prefix: 'ToolController.executeMethod' });
   ```

2. **Structured Logging**
   - Include relevant objects as separate arguments
   - Don't concatenate objects into strings
   ```typescript
   // Good
   log.debug('Validating message:', messageInfo);
   
   // Bad
   log.debug(`Validating message: ${JSON.stringify(messageInfo)}`);
   ```

3. **Performance Logging**
   - Log start/end of long operations
   - Include timing information
   ```typescript
   log.debug(`Operation completed in ${elapsed}ms`);
   ```

4. **Error Logging**
   - Include full error objects
   - Add context about the operation
   ```typescript
   log.error('Failed to process request:', error, { requestId, context });
   ```

### Configuration

1. **Environment Variables**
   - Set LOG_LEVEL in .env file
   ```env
   LOG_LEVEL=warn  # debug | info | warn | error
   ```

2. **Runtime Configuration**
   - Global logger config can be set at app startup

### Testing Considerations

1. **Test Environment**
   - Logging is minimized in test environment
   - Only errors are logged by default

2. **Log Verification**
   - Use jest spies to verify logging
   ```typescript
   const logSpy = jest.spyOn(loggerInstance, 'debug');
   expect(logSpy).toHaveBeenCalledWith('Expected message');
   ```

## Examples

### Component Method Logging
```typescript
export class ToolController {
    async executeToolCall(toolCall) {
        const log = logger.createLogger({ prefix: 'ToolController.executeToolCall' });
        log.debug('Starting tool call execution');
        try {
            // Operation logic
            log.info('Successfully executed tool call');
        } catch (error) {
            log.error('Failed to execute tool call:', error);
            throw error;
        }
    }
}
```

### Function Logging
```typescript
async function processToolCalls() {
    const log = logger.createLogger({ prefix: 'processToolCalls' });
    log.debug('Starting tool call processing');
    try {
        // Operation logic
        log.info('Successfully processed tool calls');
    } catch (error) {
        log.error('Failed to process tool calls:', error);
        throw error;
    }
}
```

### Validation Logging
```typescript
function validateMessage(msg: Message) {
    const log = logger.createLogger({ prefix: 'validateMessage' });
    log.debug('Validating message:', {
        hasContent: Boolean(msg.content),
        type: msg.type
    });
    // Validation logic
}
```

## References
- See @src/utils/logger.ts for logger implementation
- See @src/adapters/openai/adapter.ts for usage examples
- See @tests/unit/core/tools/ToolController.test.ts for testing examples
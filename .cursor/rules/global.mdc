---
description: 
globs: 
alwaysApply: true
---
---
description: Core project rules that should always be considered when working with this codebase
globs: ["**/*"]
alwaysApply: true
---

# Project Overview
This is a universal LLM caller library designed to provide a unified interface for interacting with various language model providers, with a focus on streaming, schema validation, cost tracking, and retry mechanisms.

# Core Principles

## Type Safety
- NEVER use 'any' types
- Use `type` instead of `interface`
- Maintain strict type definitions
- Document all types thoroughly
- Ensure proper error handling with type safety

## Code Architecture
- Follow functional and declarative programming patterns
- Keep code modular and maintainable
- Use pure functions where possible
- Maintain clear separation of concerns
- Preserve existing functionality unless explicitly required to change

## Dual ESM/CJS Packaging
- The project supports dual ESM and CommonJS packaging to ensure broad compatibility.
- Detailed guidelines for development, including handling of `import.meta.url`, `__dirname`, specific build steps, and troubleshooting, are documented in a dedicated rule.
- See @.cursor/rules/esm-cjs.mdc for comprehensive information.

## Prompt Enhancement
- NEVER hardcode prompts in the codebase
- Use prompt templates for consistent formatting
- Maintain prompt templates in a centralized location
- Version control prompt templates
- Document prompt template parameters

### Prompt Injection Guidelines
1. **Purpose**
   - Enhance model capabilities without modifying core functionality
   - Add specific behaviors or formats to responses
   - Support models lacking native capabilities

2. **Implementation**
   - Use system messages for behavior modification
   - Inject format requirements before user messages
   - Maintain clear separation between injected and user content
   - Document all prompt injections

3. **JSON Mode Enhancement**
   - Use prompt injection for models without native JSON mode
   - Inject JSON format requirements in system message
   - Include schema requirements when available
   - Maintain validation and repair capabilities
   - Handle validation errors gracefully

4. **Best Practices**
   - Keep injected prompts minimal and focused
   - Document prompt injection points
   - Test prompt effectiveness
   - Monitor prompt performance
   - Version control prompt changes

5. **Testing**
   - Test prompt effectiveness
   - Verify format compliance
   - Check error handling
   - Monitor performance impact
   - Document test cases

## Development Process
1. Before any changes:
   - Understand the task scope
   - Read relevant code sections
   - Create MECE (Mutually Exclusive, Collectively Exhaustive) task breakdown

2. During development:
   - Focus only on the task at hand
   - Preserve existing functionality
   - Maintain all comments
   - Ensure type safety
   - Use radash functions for complex operations

3. After changes:
   - Run and analyze tests
   - Ensure changes don't break existing functionality
   - Update documentation as needed
   - Reflect on lessons learned

## Code Standards
- Use lowercase-with-dashes for directories
- Use camelCase for variables and filenames
- Prefer named exports
- Keep variable names descriptive
- Add concise comments for non-obvious logic
- Mark potential improvements with TODO comments

## Error Handling
- Implement comprehensive error handling
- Use RetryManager for transient failures
- Maintain proper error context
- Add descriptive error messages

## Testing Requirements
- All tests must be in the `./tests` directory
- Maintain minimum 90% test coverage
- Test both success and error paths
- Test streaming scenarios thoroughly
- Verify token calculation accuracy
- Test JSON mode with different schema complexities

## Streaming Implementation
- NEVER implement fake streaming (i.e., sending a non-streaming request and then streaming the complete response)
- NEVER include mock/hard-coded data in streaming implementations (except in tests and examples)
- Properly handle tool calls during streaming, collecting tool arguments before execution
- Ensure retry policy, JSON output formats, and tool calling work correctly with streaming

# References
- See @.cursor/rules/architecture.mdc for detailed architectural decisions
- See @.cursor/rules/testing.mdc for testing conventions
- See @src/core/types.ts for type definitions
- See @src/core/prompts/templates.ts for prompt templates
